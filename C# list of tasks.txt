1 GameBj.rar
Игра в Blackjack. Консольное приложение

2b. 
Реализовать generic коллекцию, которая внутри себя хранит элементы
в List<>, если количество элементов <=5, и переключается на
SortedList<> (элементы копируются в другую внутреннюю коллекцию),
как только количество элементов доходит до 6. Оценить скорость
работы этой коллекции в сравнении с List<> и SortedList<>


2c. 
Оценить скорость а) добавления элементов b) получения элементов с)
сортировки элементов в коллекциях типа List<> и ArrayList.
Использовать элементы типа System.Int32 и System.String.


2d. 
Реализовать Generic класс: a) ограниченный "non-nullable value type"
параметрами; b) содержит в себе public property указанного при
создании типа; c) коллекция экземпляров созданного класса
сортируется по таким же правилам, как и тип параметризированного
public property.


3. 
Создать иерархию классов и выделить основные свойства
a. Класс «Живые Существа» должен быть абстрактным и содержать только
свойство «Идентификатор Существа».
b. Реализовать метод «Дышать под водой» у класса «Рыбы» и метод «Есть
сено» у класса «Лошадь».
c. Сделать так чтобы собака была обязана реализовать метод «Дышать под
водой», а карась «Есть сено»
d. Создать коллекцию из объектов типа «Живые существа».
e. Реализовать метод который будет считать количество ног у всех элементов
этой коллекции.
f. Реализовать метод который найдет и выведет идентификаторы существ
которые могут дышать под водой


4.
Реализовать класс Employee, который будет иметь открытые свойства: Last Name,
First Name, Age, Department, Address и закрытое поле EmployeeID. Класс должен
сериализоваться в XML формат. Рутовая нода при сериализации/десериализации
Employees должна называться Employees (а не ArrayOfEmployee например)
Написать Console Application, которое должно выполнить следующую
последовательность действий:
1. Десериализовать из заранее подготовленного файла коллекцию объектов
Employee, при этом поле EmployeeID должно содержать в себе значение Last
Name + First Name.
2. Вывести на экран информацию о каждом Employee в таком виде: № п/п, Last
Name: value, First Name: value, и т.д. Значения EmployeeID и Address взять из
закрытых полей используя рефлексию.
3. Отобрать Employee в возрасте от 25 до 35 лет и упорядочить их по
EmployeeID. Полученную коллекцию сериализовать в новый файл.


5.
Необходимо разработать многопоточное приложение для ОС Windows (WinForms),
которое будет отлавливать ошибки времени выполнения, возникающие в дочерних
потоках, с выводом информации об ошибках в текстовый блок.
Требования:
1. Приложение должно состоять из трех потоков, которые выполняются
параллельно:
 "основной поток" (Application.Run());
 два дочерних "потока, генерирующих исключения". Это должны быть
два независимых потока, генерирующих ошибки времени выполнения
различных типов (например FileNotFoundException и
OutOfMemoryException). Каждый такой поток должен записывать
сообщение о своей ошибке в общую очередь (Queue) и уведомлять
основной поток о возникновении ошибки.
2. Дочерние потоки, генерирующие исключения, должны создаваться и
запускаться при старте приложения, работать на протяжении всего времени
жизни приложения и завершать работу при завершении работы приложения.
3. Процесс генерации и регистрации исключений должен запускаться и
останавливаться по нажатию на соответствующие кнопки в окне
приложения. При остановке генерации и отлова дочерние потоки должны
продолжать выполняться!!!
4. Каждая запись об ошибке времени выполнения из дочернего потока должна
содержать имя потока, из которого пришла и тип сгенерированного
исключения.
5. Для уведомления основного потока о возникновении исключений
необходимо использовать события.
6. Выводить сообщения об ошибках времени выполнения из очереди
необходимо в элемент управления TextBox (мультилайн), который
необходимо разместить на главном окне приложения.
7. Синхронизация между потоками должна осуществляться с помощью
базовых механизмов, предоставляемых платформой .NET, таких как Monitor,
типов, производных от WaitHandle, и т.д. Не рекомендуется использовать
высокоуровневные механизмы, предоставляемые т.н. TPL такие, как
BlockingCollection, различные Concurrent* коллекции.
8. Алгоритм генерации исключения и выбор типов генерируемых исключений
остается на усмотрение исполнителя.
